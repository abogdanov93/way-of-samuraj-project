{"version":3,"file":"static/js/408.b1e280bb.chunk.js","mappings":"oNACA,EAAwB,qBAAxB,EAAqD,qB,8BCArD,GAAgB,WAAa,8BAA8B,QAAU,4B,mBCArE,GAAgB,QAAU,0B,SCYbA,EAA4B,SAAC,GAAgE,IAAD,EAA9DC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,OAAkBC,GAA4B,EAAtCC,SAAsC,EAA5BD,MAAME,EAAsB,EAAtBA,iBAC/E,OAAO,iCACH,0BACIC,UAAWC,EAAAA,QACXC,GAAIR,EACJA,KAAMA,EACNG,KAAMA,GACFF,EAASD,EAAMK,KAGtBH,EAAOF,OAAQ,gBAAKM,UAAWC,EAAAA,aAAhB,gBAAqCL,QAArC,IAAqCA,GAArC,UAAqCA,EAAQF,YAA7C,aAAqC,EAAcS,c,8BCL9DC,EAAgB,WAAO,IAAD,QAEzBC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,KAEjB,GAA6DC,EAAAA,EAAAA,IAAgB,CAACC,KAAM,WAA7EhB,EAAP,EAAOA,SAAUiB,EAAjB,EAAiBA,aAA0BhB,EAA3C,EAA+BiB,UAAYjB,OAASkB,EAApD,EAAoDA,MAMpD,OAAO,kBAAMC,SAAUH,GALiB,SAAAI,GACpCR,GAASS,EAAAA,EAAAA,IAAWD,EAAKE,MAAOF,EAAKG,SAAUH,EAAKI,WAAYJ,EAAKK,UACrEP,OAGG,WAEH,SAACrB,EAAD,CACIC,KAAK,QACL4B,YAAY,SACZ1B,OAAQA,EACRD,SAAUA,EACVI,iBAAkB,CAACD,SAAU,yBAC7BA,UAAQ,KAGZ,SAACL,EAAD,CACIC,KAAK,WACLG,KAAK,WACLyB,YAAY,WACZ1B,OAAQA,EACRD,SAAUA,EACVI,iBAAkB,CACdD,SAAU,wBACVyB,UAAW,CAACC,MAAO,EAAGrB,QAAS,mDAEnCL,UAAQ,KAGZ,iBAAKE,UAAWC,EAAAA,WAAhB,WACI,2CACA,oCAAWN,EAAS,eAApB,IAAmCE,KAAK,kBAG5C,iBAAKG,UAAWC,EAAAA,QAAhB,WACI,SAACwB,EAAA,EAAD,CAAe5B,KAAK,SAApB,mBACA,SAAC6B,EAAA,EAAD,CAAiB7B,KAAK,QAAtB,uBAGFD,EAAOsB,OAAStB,EAAOuB,YAClB,gBAAKnB,UAAWC,EAAAA,QAAhB,UACQ,OAANL,QAAM,IAANA,GAAA,UAAAA,EAAQsB,aAAR,eAAef,WAAf,UAA0BP,EAAOuB,gBAAjC,aAA0B,EAAiBhB,UAAW,gDAI9DE,IACM,4BACC,gBAAKsB,IAAKtB,KACV,oCAAWV,EAAS,UAAW,CAC3BG,SAAU,2BADd,IAGOE,UAAWC,EAAAA,WACXqB,YAAa,sCAK3B1B,EAAOyB,UACJ,gBAAKrB,UAAWC,EAAAA,QAAhB,UACW,OAANL,QAAM,IAANA,GAAA,UAAAA,EAAQsB,aAAR,eAAef,WAAf,UAA0BP,EAAOuB,gBAAjC,aAA0B,EAAiBhB,UAAW,oDCxDvE,EAnBkB,WAEd,IAAMyB,GAAWC,EAAAA,EAAAA,MAEXC,GAASxB,EAAAA,EAAAA,IAAYyB,EAAAA,IAS3B,OARAC,QAAQC,IAAIH,IAGZI,EAAAA,EAAAA,YAAU,WACNF,QAAQC,IAAI,YAAaH,GACrBA,GAAQF,EAAS,cACtB,CAACE,KAEG,iBAAK9B,UAAS,UAAKC,EAAL,YAAoBkC,EAAAA,EAAAA,YAAlC,WACH,qCACA,gBAAKnC,UAAWC,EAAhB,UAA6B,SAACG,EAAD","sources":["webpack://way-of-samuraj-project/./src/components/Login/Login.module.css?3530","webpack://way-of-samuraj-project/./src/components/Login/LoginForm/LoginForm.module.css?1b2c","webpack://way-of-samuraj-project/./src/components/Utils/MyInput/MyInput.module.css?a28e","components/Utils/MyInput/MyInput.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__4rE5+\",\"block\":\"Login_block__rBvGF\"};","// extracted by mini-css-extract-plugin\nexport default {\"rememberMe\":\"LoginForm_rememberMe__PzxzJ\",\"buttons\":\"LoginForm_buttons__lgp1e\"};","// extracted by mini-css-extract-plugin\nexport default {\"myInput\":\"MyInput_myInput__dmt2+\"};","import React, {FC} from \"react\"\nimport style from \"./MyInput.module.css\"\n\ntype ownPropsType = {\n    placeholder: string\n    type?: string\n    name?: string\n    errors?: any\n    register?: any\n    validationSchema?: any\n    required?: boolean\n}\n\nexport const MyInput: FC<ownPropsType> = ({name, register, errors, required, type, validationSchema}) => {\n    return <>\n        <input\n            className={style.myInput}\n            id={name}\n            name={name}\n            type={type}\n            {...register(name, validationSchema)}\n        />\n\n        {errors.name && <div className={style.errorWarning}>{errors?.name?.message}</div>}\n\n    </>\n}","import React, {FC} from \"react\"\nimport style from \"./LoginForm.module.css\"\nimport {useSelector} from \"react-redux\"\nimport {SubmitHandler, useForm} from \"react-hook-form\"\nimport {getCaptchaURL} from \"../../../redux/selectors/loginSelectors\"\nimport {PrimaryButton} from \"../../Utils/PrimaryButton/PrimaryButton\"\nimport {MyInput} from \"../../Utils/MyInput/MyInput\"\nimport {SecondaryButton} from \"../../Utils/SecondaryButton/SecondaryButton\"\nimport {useAppDispatch} from \"../../../hooks/redux\"\nimport {logInThunk} from \"../../../redux/actions/authActions\"\n\nexport type Inputs = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nexport const LoginForm: FC = () => {\n\n    const captchaURL = useSelector(getCaptchaURL)\n    const dispatch = useAppDispatch()\n\n    const {register, handleSubmit, formState: {errors}, reset} = useForm<Inputs>({mode: \"onBlur\"})\n    const onSubmit: SubmitHandler<Inputs> = data => {\n        dispatch(logInThunk(data.email, data.password, data.rememberMe, data.captcha))\n        reset()\n    }\n\n    return <form onSubmit={handleSubmit(onSubmit)}>\n\n        <MyInput\n            name=\"email\"\n            placeholder=\"E-mail\"\n            errors={errors}\n            register={register}\n            validationSchema={{required: \"The field is required\"}}\n            required\n        />\n\n        <MyInput\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            errors={errors}\n            register={register}\n            validationSchema={{\n                required: \"The field is required\",\n                minLength: {value: 4, message: \"The password should consist at least 4 symbols\"}\n            }}\n            required\n        />\n\n        <div className={style.rememberMe}>\n            <div> Remember me</div>\n            <input {...register(\"rememberMe\")} type=\"checkbox\"/>\n        </div>\n\n        <div className={style.buttons}>\n            <PrimaryButton type=\"submit\">Send</PrimaryButton>\n            <SecondaryButton type=\"reset\">Reset</SecondaryButton>\n        </div>\n\n        {(errors.email || errors.password)\n            && <div className={style.warning}>\n                {errors?.email?.message || errors.password?.message || \"Invalid email or password. Please try again\"}\n            </div>\n        }\n\n        {captchaURL\n            && <div>\n                <img src={captchaURL as string}/>\n                <input {...register(\"captcha\", {\n                    required: \"The field is required\"\n                })}\n                       className={style.newMessage}\n                       placeholder={\"Type symbols from the picture\"}\n                />\n            </div>\n        }\n\n        {errors.captcha &&\n            <div className={style.warning}>\n                {errors?.email?.message || errors.password?.message || \"Invalid email or password. Please try again\"}\n            </div>\n        }\n\n    </form>\n}","import React, {FC, useEffect} from \"react\"\nimport {useSelector} from \"react-redux\"\nimport {Navigate, useNavigate} from \"react-router-dom\"\nimport style from \"./Login.module.css\"\nimport commonStyles from \"./../../App.module.css\"\nimport {getIsAuth} from \"../../redux/selectors/loginSelectors\"\nimport {LoginForm} from \"./LoginForm/LoginForm\"\n\nconst Login: FC = () => {\n\n    const navigate = useNavigate()\n\n    const isAuth = useSelector(getIsAuth)\n    console.log(isAuth)\n    // if (isAuth) return <Navigate to=\"/profile/\"/>\n\n    useEffect(() => {\n        console.log(\"useEffect\", isAuth)\n        if (isAuth) navigate(\"/profile\")\n    }, [isAuth])\n\n    return <div className={`${style.login} ${commonStyles.whiteBlock}`}>\n        <h1>Sign in</h1>\n        <div className={style.block}><LoginForm /></div>\n    </div>\n}\n\nexport default Login"],"names":["MyInput","name","register","errors","type","required","validationSchema","className","style","id","message","LoginForm","captchaURL","useSelector","getCaptchaURL","dispatch","useAppDispatch","useForm","mode","handleSubmit","formState","reset","onSubmit","data","logInThunk","email","password","rememberMe","captcha","placeholder","minLength","value","PrimaryButton","SecondaryButton","src","navigate","useNavigate","isAuth","getIsAuth","console","log","useEffect","commonStyles"],"sourceRoot":""}